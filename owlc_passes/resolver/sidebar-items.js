initSidebarItems({"enum":[["Scope","Represents a lexical scope. A new `Scope` should be created every time the set of visible symbols changes. This can happen at blocks and `let` statements. For performance reasons, `Block` variant can contain multiple `Symbol`s for function arguments. Example: `owllang fn test(a, b) {     // A new Scope::Let is created containing 'test'. A new Scope::Block is created containing 'a', 'b'.     let x = 0;      // A new Scope::Let is created containing 'x'.     {               // A new Scope::Block is created containing nothing.         let y = x;  // A new Scope::Let is created containing 'y'.     }               // Scopes on scope_stack are popped until the last Scope::Block is reached. } `"],["Symbol","Represents a resolved symbol (can be either variable type or function type)."]],"struct":[["ResolverVisitor","Generate a map for resolving symbols in the abstract syntax tree."],["SymbolTable","Manages all the symbols that are currently visible."]]});